name: Continuous Integration

on:
  pull_request:
    branches:
      - testing
  push:
    branches:
      - testing

jobs:
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies for Linting
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies for Testing
        run: npm ci --legacy-peer-deps

      - name: Execute Unit Tests
        run: npm test

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t viexxx/kelompok13:${{ github.sha }} .
          docker push viexxx/kelompok13:${{ github.sha }}
          docker tag viexxx/kelompok13:${{ github.sha }} viexxx/kelompok13:latest
          docker push viexxx/kelompok13:latest

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull viexxx/kelompok13:${{ github.sha }}

      - name: Start Docker Container
        run: |
          docker run -d -p 3000:3000 --name test-app viexxx/kelompok13:${{ github.sha }}
          sleep 15 # Give time for the app to start

      - name: Run Integration Tests (Health Check)
        run: |
          echo "Running a basic health check integration test..."
          for i in $(seq 1 10); do
            curl -f http://localhost:3000 && echo "App is reachable!" && break || sleep 5
            if [ $i -eq 10 ]; then
              echo "App did not become reachable in time!"
              docker logs test-app # Show logs for debugging
              exit 1
            fi
          done
          echo "Integration test passed (basic health check)!"

      - name: Stop and Remove Container
        if: always()
        run: docker rm -f test-app